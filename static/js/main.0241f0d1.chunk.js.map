{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","post","search","handleChange","e","setState","target","id","value","handleSubmit","preventDefault","document","querySelector","axios","get","process","then","res","data","results","images","this","map","pics","className","key","src","urls","small","alt","href","links","download_location","onSubmit","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oQAiKeA,E,4MArEbC,MAAQ,CACNC,KAAM,KACNC,OAAQ,I,EAgBVC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,OAAOC,GAAKH,EAAEE,OAAOE,S,EAI5BC,aAAe,SAACL,GACdA,EAAEM,iBACFC,SAASC,cAAc,WAAWJ,MAAQ,GAC1C,EAAKH,SAAS,CACZJ,KAAM,OAERY,IACGC,IADH,uDAEoD,EAAKd,MAAME,OAF/D,sBAEmFa,gDAEhFC,MAAK,SAACC,GACL,EAAKZ,SAAS,CACZJ,KAAMgB,EAAIC,KAAKC,c,kEAhCF,IAAD,OAClBN,IACGC,IADH,0EAEuEC,gDAEpEC,MAAK,SAACC,GACL,EAAKZ,SAAS,CACZJ,KAAMgB,EAAIC,KAAKC,e,+BAiCrB,IAAMC,EAASC,KAAKrB,MAAMC,KAAQoB,KAAKrB,MAAMC,KAAKqB,KAAI,SAACC,GACrD,OACE,yBAAKC,UAAU,UAAUC,IAAKF,EAAKhB,IACjC,yBAAKmB,IAAKH,EAAKI,KAAKC,MAAOC,IAAI,KAC/B,uBAAGC,KAAMP,EAAKQ,MAAMC,mBAApB,YAIJ,yBAAKR,UAAU,WACb,8CAGJ,OACE,yBAAKA,UAAU,OACb,oDACA,0BAAMS,SAAUZ,KAAKZ,cACnB,2BAAOyB,KAAK,OAAO3B,GAAG,SAAS4B,SAAUd,KAAKlB,eAC9C,4BAAQ+B,KAAK,UAAb,WAEDd,O,GAhESgB,aC/EEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASkC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0241f0d1.chunk.js","sourcesContent":["// import React, { Component } from \"react\";\r\n// import AddItem from './ninjas'\r\n// import AddTodo from './ninjasform'\r\n// import './App.css'\r\n// // import Table from './table'\r\n// // import logo from './logo.svg';\r\n// // import './App.css';\r\n\r\n// class App extends Component {\r\n//   state = {\r\n//     todoItems: [\r\n//       {item: 'Go to gym', id: 1}\r\n//     ]\r\n//   }\r\n//   getItem = (item) => {\r\n//     let todoItems = [...this.state.todoItems, item];\r\n//      this.setState({\r\n//        todoItems})\r\n//      }\r\n//      deleteItem = (id) =>{\r\n//       console.log(id);\r\n//       let todoItems = this.state.todoItems.filter((item) => {\r\n//         return item.id !== id;\r\n//       })\r\n//       this.setState({\r\n//         todoItems\r\n//       })\r\n//      }\r\n//   render(){\r\n//     return (\r\n//       <div className=\"container\">\r\n//         <h1>Todo</h1>\r\n//         <AddTodo getItem={this.getItem}/>\r\n//         <AddItem todoItems={this.state.todoItems} deleteItem={this.deleteItem}/>\r\n//       </div>\r\n//     );\r\n//   }\r\n//   // state = {\r\n//   //   ninjas: [\r\n//   //     { name: \"Abhijeet\", age: 20, belt: \"Black\", id: 1 },\r\n//   //     { name: \"Shubham\", age: 20, belt: \"Blue\", id: 2 },\r\n//   //     { name: \"Nandu\", age: 19, belt: \"Green\", id: 3 },\r\n//   //     { name: \"Aman\", age: 20, belt: \"Black\", id: 4 },\r\n//   //   ],\r\n//   //   items: [\r\n//   //     { name: \"abhijeet\", rollNo: 1, },\r\n//   //     { name: \"abhi\", rollNo: 2 },\r\n//   //     { name: \"jeet\", rollNo: 3 },\r\n//   //     { name: \"abhishek\", rollNo: 4 },\r\n//   //   ],\r\n//   // };\r\n//   // addNinjas = (ninja) => {\r\n//   //   // console.log(ninja);\r\n//   //   ninja.id = Math.random();\r\n//   //   let ninjas = [...this.state.ninjas, ninja];\r\n//   //   this.setState({\r\n//   //     ninjas,\r\n//   //   });\r\n//   // };\r\n//   // deleteNinja = (id) => {\r\n//   //   let ninjas = this.state.ninjas.filter((items) => {\r\n//   //     return items.id !== id;\r\n//   //   });\r\n//   //   this.setState({\r\n//   //     ninjas,\r\n//   //   });\r\n//   // };\r\n//   // render() {\r\n//   //   // console.log(this.state.ninjas);\r\n\r\n//   //   return (\r\n//   //     <div className=\"App\">\r\n//   //       <h1>My First React App!</h1>\r\n//   //       <p>Welcome :</p>\r\n//   //       <Ninjas ninjas={this.state.ninjas} deleteNinja={this.deleteNinja} />\r\n//   //       <AddNinjas addNinjas={this.addNinjas} />\r\n//   //       <Table items={this.state.items} />\r\n//   //     </div>\r\n//   //   );\r\n//   // }\r\n// }\r\n\r\n// export default App;\r\n\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios'\r\n// import \"./App.css\"\r\n\r\n// DBR8Klvy3Cd7Qmu7lX_YD9G8Kj8wVm7cDZDTvq5bYok\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    post: null,\r\n    search: '',\r\n  }\r\n  componentDidMount() {\r\n    axios\r\n      .get(\r\n        `https://api.unsplash.com/search/photos?query=computer&client_id=${process.env.REACT_APP_UNPLASH_API}`\r\n      )\r\n      .then((res) => {\r\n        this.setState({\r\n          post: res.data.results,\r\n        });\r\n        // console.log(this.state.post);\r\n        // console.log(res.data.results);\r\n\r\n      });\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    })\r\n\r\n  }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    document.querySelector('#search').value = ''\r\n    this.setState({\r\n      post: null\r\n    })\r\n    axios\r\n      .get(\r\n        `https://api.unsplash.com/search/photos?query=${this.state.search}&client_id=${process.env.REACT_APP_UNPLASH_API}`\r\n      )\r\n      .then((res) => {\r\n        this.setState({\r\n          post: res.data.results,\r\n        });\r\n        // console.log(this.state.post);\r\n        // console.log(res);\r\n      });\r\n\r\n  }\r\n  render() {  \r\n    const images = this.state.post ? (this.state.post.map((pics) => {\r\n      return (\r\n        <div className=\"content\" key={pics.id}>\r\n          <img src={pics.urls.small} alt=\"\" />\r\n          <a href={pics.links.download_location}>link</a>\r\n        </div>\r\n      );\r\n    }) ) : (\r\n      <div className=\"content\">\r\n        <p>Loading images</p>\r\n      </div>\r\n    )\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Abhijeet.R. Kushwaha</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input type=\"text\" id=\"search\" onChange={this.handleChange} />\r\n          <button type=\"submit\">search</button>\r\n        </form>\r\n        {images}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n// class Github {\r\n//   constructor() {\r\n//     this.client_id = \"4344cc18f43-2b5632ea4\";\r\n//     this.client_secret = \"42bfa0ba6ca7e7e0c46239f65ccfa6eff41ef4dc\";\r\n//     this.repos_count = 5; //we dont wanna see all repos of an individual\r\n//     this.repos_sort = \"created: asc\";\r\n//   }\r\n//   async getUser(user) {\r\n//     const profileResponse = await fetch(\r\n//       `https://api.github.com/users/${user}?client_id=${this.client_id}&client_secret=${this.client_secret}`\r\n//     );\r\n//     const repoResponse = await fetch(\r\n//       `https://api.github.com/users/${user}/repos?per_page=${this.repos_count}&sort=${this.repos_sort}&client_id=${this.client_id}&client_secret=${this.client_secret}`\r\n//     );\r\n//     const profile = await profileResponse.json();\r\n//     const repos = await repoResponse.json();\r\n\r\n//     return {\r\n//       profile,\r\n//       repos,\r\n//     };\r\n//   }\r\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}